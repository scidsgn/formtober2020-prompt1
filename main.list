# file opened: main.asm
  1   0000                  device ZXSPECTRUM128
  2   0000
  3   0000                  org $8000
  4   8000
  5   8000                  include "./lib/output.z80"
# file opened: ./lib/output.z80
  1+  8000              ;
  2+  8000              ; Title:	ZX Spectrum Standard Output Routines
  3+  8000              ; Author:	Dean Belfield
  4+  8000              ; Created:	29/07/2011
  5+  8000              ; Last Updated:	08/02/2020
  6+  8000              ;
  7+  8000              ; Requires:
  8+  8000              ;
  9+  8000              ; Modinfo:
 10+  8000              ;
 11+  8000              ; 02/07/2012:	Added Pixel_Address_Down and Pixel_Address_Up routines
 12+  8000              ; 04/07/2012:	Moved Clear_Screen to Screen_Buffer
 13+  8000              ; 08/02/2010:	Added Print_BC
 14+  8000              ;		Moved Clear_Screen into here (originally in screen_buffer.z80)
 15+  8000              ;		All output routines refactored to use HL for screen address
 16+  8000              ;		Added Fill_Attr routine
 17+  8000              ;
 18+  8000
 19+  8000              ; Simple clear-screen routine
 20+  8000              ; Uses LDIR to block clear memory
 21+  8000              ; A:  Colour to clear attribute block of memory with
 22+  8000              ;
 23+  8000 21 00 40     Clear_Screen:		LD HL,16384			; Start address of screen bitmap
 24+  8003 11 01 40     			LD DE,16385			; Address + 1
 25+  8006 01 00 18     			LD BC,6144			; Length of bitmap memory to clear
 26+  8009 36 00        			LD (HL),0			; Set the first byte to 0
 27+  800B ED B0        			LDIR				; Copy this byte to the second, and so on
 28+  800D 01 FF 02     			LD BC,767			; Length of attribute memory, less one to clear
 29+  8010 77           			LD (HL),A			; Set the first byte to A
 30+  8011 ED B0        			LDIR				; Copy this byte to the second, and so on
 31+  8013 C9           			RET
 32+  8014
 33+  8014              ; Fill a box of the screen with a solid colour
 34+  8014              ;  A: The colour
 35+  8014              ; HL: Address in the attribute map
 36+  8014              ;  C: Width
 37+  8014              ;  B: Height
 38+  8014              ;
 39+  8014 11 20 00     Fill_Attr:		LD DE,32
 40+  8017 E5           1:			PUSH HL
 41+  8018 C5           			PUSH BC
 42+  8019 77           2:			LD (HL), A
 43+  801A 2C           			INC L
 44+  801B 0D           			DEC C
 45+  801C 20 FB        			JR NZ, 2B
 46+  801E C1           			POP BC
 47+  801F E1           			POP HL
 48+  8020 19           			ADD HL,DE
 49+  8021 10 F4        			DJNZ 1B
 50+  8023 C9           			RET
 51+  8024
 52+  8024              ; Print String Data
 53+  8024              ; First two bytes of string contain X and Y char position, then the string
 54+  8024              ; Individual strings are terminated with 0xFE
 55+  8024              ; End of data is terminated with 0xFF
 56+  8024              ; IX: Address of string
 57+  8024              ;
 58+  8024 DD 6E 00     Print_String:		LD L,(IX+0)			; Fetch the X coordinate
 59+  8027 DD 23        			INC IX				; Increase HL to the next memory location
 60+  8029 DD 66 00     			LD H,(IX+0)			; Fetch the Y coordinate
 61+  802C DD 23        			INC IX				; Increase HL to the next memory location
 62+  802E CD 42 80     			CALL Get_Char_Address		; Calculate the screen address (in DE)
 63+  8031 DD 7E 00     Print_String_0:		LD A,(IX)			; Fetch the character to print
 64+  8034 DD 23        			INC IX				; Increase HL to the next character
 65+  8036 FE FE        			CP 0xFE				; Compare with 0xFE
 66+  8038 28 EA        			JR Z,Print_String		; If it is equal to 0xFE then loop back to print next string
 67+  803A D0           			RET NC				; If it is greater or equal to (carry bit set) then
 68+  803B CD D1 80     			CALL Print_Char			; Print the character
 69+  803E 2C           			INC L				; Go to the next screen address
 70+  803F 18 F0        			JR Print_String_0		; Loop back to print next character
 71+  8041 C9           			RET
 72+  8042
 73+  8042              ; Get screen address
 74+  8042              ; H = Y character position
 75+  8042              ; L = X character position
 76+  8042              ; Returns address in HL
 77+  8042              ;
 78+  8042 7C           Get_Char_Address:	LD A,H
 79+  8043 E6 07        			AND %00000111
 80+  8045 1F           			RRA
 81+  8046 1F           			RRA
 82+  8047 1F           			RRA
 83+  8048 1F           			RRA
 84+  8049 B5           			OR L
 85+  804A 6F           			LD L,A
 86+  804B 7C           			LD A,H
 87+  804C E6 18        			AND %00011000
 88+  804E F6 40        			OR %01000000
 89+  8050 67           			LD H,A
 90+  8051 C9           			RET				; Returns screen address in HL
 91+  8052
 92+  8052              ; Move HL down one character line
 93+  8052              ;
 94+  8052 7D           Char_Address_Down:	LD A, L
 95+  8053 C6 20        			ADD A, 32
 96+  8055 6F           			LD L, A
 97+  8056 D0           			RET NC
 98+  8057 7C           			LD A, H
 99+  8058 C6 08        			ADD A, 8
100+  805A 67           			LD H, A
101+  805B C9           			RET
102+  805C
103+  805C              ; Get screen address
104+  805C              ; B = Y pixel position
105+  805C              ; C = X pixel position
106+  805C              ; Returns address in HL and pixel position within character in A
107+  805C              ;
108+  805C 78           Get_Pixel_Address:	LD A,B				; Calculate Y2,Y1,Y0
109+  805D E6 07        			AND %00000111			; Mask out unwanted bits
110+  805F F6 40        			OR %01000000			; Set base address of screen
111+  8061 67           			LD H,A				; Store in H
112+  8062 78           			LD A,B				; Calculate Y7,Y6
113+  8063 1F           			RRA				; Shift to position
114+  8064 1F           			RRA
115+  8065 1F           			RRA
116+  8066 E6 18        			AND %00011000			; Mask out unwanted bits
117+  8068 B4           			OR H				; OR with Y2,Y1,Y0
118+  8069 67           			LD H,A				; Store in H
119+  806A 78           			LD A,B				; Calculate Y5,Y4,Y3
120+  806B 17           			RLA				; Shift to position
121+  806C 17           			RLA
122+  806D E6 E0        			AND %11100000			; Mask out unwanted bits
123+  806F 6F           			LD L,A				; Store in L
124+  8070 79           			LD A,C				; Calculate X4,X3,X2,X1,X0
125+  8071 1F           			RRA				; Shift into position
126+  8072 1F           			RRA
127+  8073 1F           			RRA
128+  8074 E6 1F        			AND %00011111			; Mask out unwanted bits
129+  8076 B5           			OR L				; OR with Y5,Y4,Y3
130+  8077 6F           			LD L,A				; Store in L
131+  8078 79           			LD A,C
132+  8079 E6 07        			AND 7
133+  807B C9           			RET
134+  807C
135+  807C              ; Move HL down one pixel line
136+  807C              ;
137+  807C 24           Pixel_Address_Down:	INC H				; Go down onto the next pixel line
138+  807D 7C           			LD A,H				; Check if we have gone onto next character boundary
139+  807E E6 07        			AND 7
140+  8080 C0           			RET NZ				; No, so skip the next bit
141+  8081 7D           			LD A,L				; Go onto the next character line
142+  8082 C6 20        			ADD A,32
143+  8084 6F           			LD L,A
144+  8085 D8           			RET C				; Check if we have gone onto next third of screen
145+  8086 7C           			LD A,H				; Yes, so go onto next third
146+  8087 D6 08        			SUB 8
147+  8089 67           			LD H,A
148+  808A C9           			RET
149+  808B
150+  808B              ; Move HL up one pixel line
151+  808B              ;
152+  808B 25           Pixel_Address_Up:	DEC H				; Go up onto the next pixel line
153+  808C 7C           			LD A,H				; Check if we have gone onto the next character boundary
154+  808D E6 07        			AND 7
155+  808F FE 07        			CP 7
156+  8091 6F           			LD L,A
157+  8092 D8           			RET C
158+  8093 7C           			LD A,H
159+  8094 C6 08        			ADD A,8
160+  8096 67           			LD H,A
161+  8097 C9           			RET
162+  8098
163+  8098              ; Print a single BCD value
164+  8098              ;  A: Character to print
165+  8098              ; HL: Screen address to print character at
166+  8098              ;
167+  8098 DD 7E 00     Print_BCD_8		LD A, (IX)
167+  809B DD 23          INC IX
167+  809D CD B5 80       CALL Print_BCD
168+  80A0 DD 7E 00     Print_BCD_6		LD A, (IX)
168+  80A3 DD 23          INC IX
168+  80A5 CD B5 80       CALL Print_BCD
169+  80A8 DD 7E 00     Print_BCD_4		LD A, (IX)
169+  80AB DD 23          INC IX
169+  80AD CD B5 80       CALL Print_BCD
170+  80B0 DD 7E 00     Print_BCD_2		LD A, (IX)
170+  80B3 DD 23          INC IX
171+  80B5 F5           Print_BCD:		PUSH AF				; Store the value
172+  80B6 E6 F0        			AND 0xF0			; Get the top nibble
173+  80B8 1F           			RRA				; Shift into bottom nibble
174+  80B9 1F           			RRA
175+  80BA 1F           			RRA
176+  80BB 1F           			RRA
177+  80BC C6 30        			ADD A, '0'			; Add to ASCII '0'
178+  80BE CD D1 80     			CALL Print_Char			; Print the character
179+  80C1 2C           			INC L				; Move right one space
180+  80C2 F1           			POP AF
181+  80C3 E6 0F        			AND 0x0F			; Get the bottom nibble
182+  80C5 C6 30        			ADD A, '0'			; Add to ASCII '0'
183+  80C7 CD D1 80     			CALL Print_Char			; Print
184+  80CA 2C           			INC L				; Move right one space
185+  80CB C9           			RET
186+  80CC
187+  80CC              ; Print a single character out to an X/Y position
188+  80CC              ;  A: Character to print
189+  80CC              ;  C: X Coordinate
190+  80CC              ;  B: Y Coordinate
191+  80CC              ; DE: Address of character set
192+  80CC              ;
193+  80CC F5           Print_Char_At:		PUSH AF
194+  80CD CD 42 80     			CALL Get_Char_Address
195+  80D0 F1           			POP AF				; Fall through to Print_Char
196+  80D1              ;
197+  80D1              ; Print a single character out to a screen address
198+  80D1              ;  A:  Character to print
199+  80D1              ;  HL: Screen address to print character at
200+  80D1              ;  DE: Address of character set (if entering at Print_Char_UDG)
201+  80D1              ; No SM code here - needs to be re-enterent if called on interrupt
202+  80D1              ;
203+  80D1 11 00 3C     Print_Char:		LD DE, 0x3C00			; Address of character set in ROM
204+  80D4 E5           			PUSH HL
205+  80D5 06 00        			LD B, 0				; Get index into character set
206+  80D7 4F           			LD C, A
207+  80D8              			DUP 3
208+  80D8 CB 21       >			SLA C
209+  80DA CB 10       >			RL B
208+  80DC CB 21       >			SLA C
209+  80DE CB 10       >			RL B
208+  80E0 CB 21       >			SLA C
209+  80E2 CB 10       >			RL B
210+  80E4              			EDUP
211+  80E4 EB           			EX DE, HL
212+  80E5 09           			ADD HL, BC
213+  80E6 EB           			EX DE, HL
214+  80E7 CD EC 80     			CALL Print_UDG8
215+  80EA E1           			POP HL
216+  80EB C9           			RET
217+  80EC
218+  80EC              ; Print a UDG (Single Height)
219+  80EC              ; DE - Character data
220+  80EC              ; HL - Screen address
221+  80EC              ;
222+  80EC 06 08        Print_UDG8:		LD B,8				; Loop counter
223+  80EE 1A           2:			LD A,(DE)			; Get the byte from the ROM into A
224+  80EF 77           			LD (HL),A			; Stick A onto the screen
225+  80F0 13           			INC DE				; Goto next byte of character
226+  80F1 24           			INC H				; Goto next line on screen
227+  80F2 10 FA        			DJNZ 2B				; Loop around whilst it is Not Zero (NZ)
228+  80F4 C9           			RET
229+  80F5
# file closed: ./lib/output.z80
  6   80F5
  7   80F5                  include "./track.asm"
# file opened: ./track.asm
  1+  80F5              ; TRACK DRAWING
  2+  80F5
  3+  80F5              ; fills out the area that will be next to the track
  4+  80F5              PrepTrack:
  5+  80F5 06 00            ld b, 0
  6+  80F7 0E 60            ld c, 96 ; 12 * 8 (8 "pixels" per block)
  7+  80F9 CD C5 82         call GetAttrAddress
  8+  80FC
  9+  80FC 0E 20            ld c, 32
 10+  80FE 06 0C            ld b, 12
 11+  8100 3E 3F            ld a, %00111111 ; "dark" white = gray
 12+  8102 CD 14 80         call Fill_Attr
 13+  8105 C9               ret
 14+  8106
 15+  8106 00           TrackPaletteOffset: db 0 ; 0, 1 or 2
 16+  8107
 17+  8107              ; Update the palette offset
 18+  8107              TrackPaletteTick:
 19+  8107 3A 06 81         ld a, (TrackPaletteOffset)
 20+  810A 3C               inc a ; increment
 21+  810B FE 03            cp 3 ; if a == 3, Z = true
 22+  810D 20 02            jr nz, TrackPaletteTickDone
 23+  810F
 24+  810F                  ; uh oh! offset = 3!! oopsies!
 25+  810F 3E 00            ld a, 0
 26+  8111
 27+  8111              TrackPaletteTickDone:
 28+  8111 32 06 81         ld (TrackPaletteOffset), a ; put back
 29+  8114 C9               ret
 30+  8115
 31+  8115              FillTrackStart:
 32+  8115 06 0C            ld b, 12 ; b is the loop counter
 33+  8117              FillTrackLoop:
 34+  8117 CD 2C 81         call FillTrackLoopBody
 35+  811A
 36+  811A 10 FB            djnz FillTrackLoop ; loop back if b != 0
 37+  811C
 38+  811C C9               ret
 39+  811D
 40+  811D              ; track colors!
 41+  811D 52           TrackPalette: db %01010010 ; red
 42+  811E 76                         db %01110110 ; yellow
 43+  811F 64                         db %01100100 ; green
 44+  8120 52                         db %01010010 ; repeating, so that i don't need modulo
 45+  8121 76                         db %01110110
 46+  8122 64                         db %01100100
 47+  8123 52                         db %01010010
 48+  8124 76                         db %01110110
 49+  8125 64                         db %01100100
 50+  8126 52                         db %01010010
 51+  8127 76                         db %01110110
 52+  8128 64                         db %01100100
 53+  8129 52                         db %01010010
 54+  812A 76                         db %01110110
 55+  812B 64                         db %01100100
 56+  812C
 57+  812C              FillTrackLoopBody:
 58+  812C C5               push bc ; this puts b (and c) onto the stack
 59+  812D                          ; that will preserve the loop counter
 60+  812D
 61+  812D                  ; Calculating the Y position of the track block
 62+  812D 78               ld a, b
 63+  812E 17               rla ; multiply by 8 by rotating left 3 times
 64+  812F 17               rla
 65+  8130 17               rla
 66+  8131 C6 58            add 88
 67+  8133 4F               ld c, a
 68+  8134
 69+  8134                  ; Calculating the X position of the track block
 70+  8134 3E 0C            ld a, 12
 71+  8136 90               sub b
 72+  8137 47               ld b, a
 73+  8138
 74+  8138 CD C5 82         call GetAttrAddress
 75+  813B
 76+  813B                  ; Pick the color from the palette based on X
 77+  813B E5               push hl ; hl has the address!!
 78+  813C 21 1D 81         ld hl, TrackPalette
 79+  813F 7D               ld a, l ; manipulation time!
 80+  8140 80               add b ; different colors!
 81+  8141
 82+  8141                  ; Adding the "offset"
 83+  8141 E5               push hl
 84+  8142 2A 06 81         ld hl, (TrackPaletteOffset)
 85+  8145 85               add l ; offset!
 86+  8146 E1               pop hl
 87+  8147
 88+  8147 6F               ld l, a
 89+  8148 7E               ld a, (hl)
 90+  8149 E1               pop hl ; oof!
 91+  814A F5               push af ; store the color for a sec
 92+  814B
 93+  814B                  ; Calculating the width
 94+  814B                  ; Width = 32 - x - x (x = "margin")
 95+  814B 3E 20            ld a, 32
 96+  814D 90               sub b
 97+  814E 90               sub b
 98+  814F 4F               ld c, a
 99+  8150                  ; Height = 1
100+  8150 06 01            ld b, 1
101+  8152
102+  8152 F1               pop af ; get that color back
103+  8153 CD 14 80         call Fill_Attr
104+  8156
105+  8156 C1               pop bc ; bring back the loop counter
106+  8157 C9               ret
# file closed: ./track.asm
  8   8158                  include "./sky.asm"
# file opened: ./sky.asm
  1+  8158              ; Draws the sky "gradient"
  2+  8158              PrepSky:
  3+  8158 06 00            ld b, 0
  4+  815A 0E 58            ld c, 88
  5+  815C CD C5 82         call GetAttrAddress ; HL = address
  6+  815F
  7+  815F 0E 20            ld c, 32 ; width
  8+  8161 06 01            ld b, 1 ; height
  9+  8163 3E 48            ld a, %01001000 ; bright blue
 10+  8165 CD 14 80         call Fill_Attr
 11+  8168
 12+  8168 06 00            ld b, 0
 13+  816A 0E 50            ld c, 80
 14+  816C CD C5 82         call GetAttrAddress ; HL = address
 15+  816F
 16+  816F 0E 20            ld c, 32 ; width
 17+  8171 06 01            ld b, 1 ; height
 18+  8173 3E 08            ld a, %00001000 ; dark blue
 19+  8175 CD 14 80         call Fill_Attr
 20+  8178
 21+  8178 CD 9C 81         call DrawMoon
 22+  817B
 23+  817B C9               ret
 24+  817C
 25+  817C              ; Moon sprites
 26+  817C 07           MoonSprite00: db %00000111
 27+  817D 1F                         db %00011111
 28+  817E 3F                         db %00111111
 29+  817F 7F                         db %01111111
 30+  8180 7F                         db %01111111
 31+  8181 FE                         db %11111110
 32+  8182 FE                         db %11111110
 33+  8183 FE                         db %11111110
 34+  8184 C0           MoonSprite01: db %11000000
 35+  8185 F0                         db %11110000
 36+  8186 F8                         db %11111000
 37+  8187 FC                         db %11111100
 38+  8188 04                         db %00000100
 39+  8189 02                         db %00000010
 40+  818A 00                         db %00000000
 41+  818B 00                         db %00000000
 42+  818C FE           MoonSprite10: db %11111110
 43+  818D FE                         db %11111110
 44+  818E 7F                         db %01111111
 45+  818F 7F                         db %01111111
 46+  8190 3F                         db %00111111
 47+  8191 1F                         db %00011111
 48+  8192 07                         db %00000111
 49+  8193 00                         db %00000000
 50+  8194 00           MoonSprite11: db %00000000
 51+  8195 02                         db %00000010
 52+  8196 04                         db %00000100
 53+  8197 FC                         db %11111100
 54+  8198 F8                         db %11111000
 55+  8199 F0                         db %11110000
 56+  819A C0                         db %11000000
 57+  819B 00                         db %00000000
 58+  819C
 59+  819C              DrawMoon:
 60+  819C 21 7C 81         ld hl, MoonSprite00
 61+  819F 06 02            ld b, 2
 62+  81A1 0E 10            ld c, 16
 63+  81A3 CD D7 82         call GetScreenPos
 64+  81A6 CD FC 82         call DrawSprite
 65+  81A9
 66+  81A9 21 84 81         ld hl, MoonSprite01
 67+  81AC 06 03            ld b, 3
 68+  81AE 0E 10            ld c, 16
 69+  81B0 CD D7 82         call GetScreenPos
 70+  81B3 CD FC 82         call DrawSprite
 71+  81B6
 72+  81B6 21 8C 81         ld hl, MoonSprite10
 73+  81B9 06 02            ld b, 2
 74+  81BB 0E 18            ld c, 24
 75+  81BD CD D7 82         call GetScreenPos
 76+  81C0 CD FC 82         call DrawSprite
 77+  81C3
 78+  81C3 21 94 81         ld hl, MoonSprite11
 79+  81C6 06 03            ld b, 3
 80+  81C8 0E 18            ld c, 24
 81+  81CA CD D7 82         call GetScreenPos
 82+  81CD CD FC 82         call DrawSprite
 83+  81D0
 84+  81D0 C9               ret
 85+  81D1
 86+  81D1 00           StarsSprite0: db %00000000
 87+  81D2 04                         db %00000100
 88+  81D3 0A                         db %00001010
 89+  81D4 04                         db %00000100
 90+  81D5 00                         db %00000000
 91+  81D6 40                         db %01000000
 92+  81D7 A0                         db %10100000
 93+  81D8 40                         db %01000000
 94+  81D9 00           StarsSprite1: db %00000000
 95+  81DA 0A                         db %00001010
 96+  81DB 04                         db %00000100
 97+  81DC 0A                         db %00001010
 98+  81DD 00                         db %00000000
 99+  81DE A0                         db %10100000
100+  81DF 40                         db %01000000
101+  81E0 A0                         db %10100000
102+  81E1
103+  81E1 00           StarBlinkOffset: db 0 ; 0 or 1
104+  81E2
105+  81E2              StarBlinkTick:
106+  81E2 3A E1 81         ld a, (StarBlinkOffset)
107+  81E5 EE 01            xor 1
108+  81E7 32 E1 81         ld (StarBlinkOffset), a
109+  81EA
110+  81EA              DrawStars:
111+  81EA 06 06            ld b, 6
112+  81EC 0E 10            ld c, 16
113+  81EE CD D7 82         call GetScreenPos
114+  81F1 CD 45 82         call DrawStar
115+  81F4
116+  81F4 06 10            ld b, 16
117+  81F6 0E 10            ld c, 16
118+  81F8 CD D7 82         call GetScreenPos
119+  81FB CD 45 82         call DrawStar
120+  81FE
121+  81FE 06 1A            ld b, 26
122+  8200 0E 10            ld c, 16
123+  8202 CD D7 82         call GetScreenPos
124+  8205 CD 45 82         call DrawStar
125+  8208
126+  8208 06 0A            ld b, 10
127+  820A 0E 20            ld c, 32
128+  820C CD D7 82         call GetScreenPos
129+  820F CD 45 82         call DrawStar
130+  8212
131+  8212 06 14            ld b, 20
132+  8214 0E 20            ld c, 32
133+  8216 CD D7 82         call GetScreenPos
134+  8219 CD 45 82         call DrawStar
135+  821C
136+  821C 06 1E            ld b, 30
137+  821E 0E 20            ld c, 32
138+  8220 CD D7 82         call GetScreenPos
139+  8223 CD 45 82         call DrawStar
140+  8226
141+  8226 06 04            ld b, 4
142+  8228 0E 30            ld c, 48
143+  822A CD D7 82         call GetScreenPos
144+  822D CD 45 82         call DrawStar
145+  8230
146+  8230 06 0E            ld b, 14
147+  8232 0E 30            ld c, 48
148+  8234 CD D7 82         call GetScreenPos
149+  8237 CD 45 82         call DrawStar
150+  823A
151+  823A 06 18            ld b, 24
152+  823C 0E 30            ld c, 48
153+  823E CD D7 82         call GetScreenPos
154+  8241 CD 45 82         call DrawStar
155+  8244
156+  8244 C9               ret
157+  8245
158+  8245              DrawStar:
159+  8245 21 D1 81         ld hl, StarsSprite0
160+  8248 3A E1 81         ld a, (StarBlinkOffset)
161+  824B FE 00            cp 0
162+  824D 28 03            jr z, DrawStarCont
163+  824F 21 D9 81         ld hl, StarsSprite1
164+  8252              DrawStarCont:
165+  8252 CD FC 82         call DrawSprite
166+  8255 C9               ret
# file closed: ./sky.asm
  9   8256
 10   8256              Main:
 11   8256                  ; pain incoming
 12   8256 CD B9 82         call PrepScreen
 13   8259 CD F5 80         call PrepTrack
 14   825C CD 58 81         call PrepSky
 15   825F
 16   825F CD BF 82         call PrepBorder
 17   8262
 18   8262 CD A8 82         call FillTurnBack
 19   8265 CD A0 82         call DrawString
 20   8268
 21   8268 CD 6D 82         call AnimLoop
 22   826B C9               ret
 23   826C
 24   826C 3C           AnimTickDelay: db 60 ; delay for tick updates
 25   826D
 26   826D              ; Animation loop!
 27   826D              AnimLoop:
 28   826D CD 15 81         call FillTrackStart
 29   8270 CD EA 81         call DrawStars
 30   8273
 31   8273                  ; This calms the tick updates by spacing them out
 32   8273 3A 6C 82         ld a, (AnimTickDelay)
 33   8276 FE 00            cp 0
 34   8278 20 0B            jr nz, AnimLoopDone
 35   827A 3E 3C            ld a, 60
 36   827C 32 6C 82         ld (AnimTickDelay), a
 37   827F
 38   827F                  ; Tick updates
 39   827F CD 07 81         call TrackPaletteTick
 40   8282 CD E2 81         call StarBlinkTick
 41   8285
 42   8285              AnimLoopDone:
 43   8285 3A 6C 82         ld a, (AnimTickDelay)
 44   8288 3D               dec a
 45   8289 32 6C 82         ld (AnimTickDelay), a
 46   828C
 47   828C C3 6D 82         jp AnimLoop
 48   828F
 49   828F              ; Draws the * TURN BACK * text
 50   828F 09 00 2A 20  TurnBackStr: db $9, $0, "* TURN  BACK *", $FF
 50   8293 54 55 52 4E
 50   8297 20 20 42 41
 50   829B 43 4B 20 2A
 50   829F FF
 51   82A0              DrawString:
 52   82A0 DD 21 8F 82      ld ix, TurnBackStr
 53   82A4 CD 24 80         call Print_String
 54   82A7 C9               ret
 55   82A8
 56   82A8              FillTurnBack:
 57   82A8 06 08            ld b, 8
 58   82AA 0E 00            ld c, 0
 59   82AC CD C5 82         call GetAttrAddress ; HL = address
 60   82AF
 61   82AF 0E 10            ld c, 16 ; width
 62   82B1 06 01            ld b, 1 ; height
 63   82B3 3E C2            ld a, %11000010 ; bright red, flashing
 64   82B5 CD 14 80         call Fill_Attr
 65   82B8 C9               ret
 66   82B9
 67   82B9              ; fill screen with black
 68   82B9              PrepScreen:
 69   82B9 3E 47            ld a, %01000111 ; black, white "ink"
 70   82BB CD 00 80         call Clear_Screen
 71   82BE C9               ret
 72   82BF
 73   82BF              PrepBorder:
 74   82BF 3E 00            ld a, %00000000
 75   82C1 CD 9B 22         call 8859 ; border color
 76   82C4 C9               ret
 77   82C5
 78   82C5
 79   82C5              ; Get address of block in attribute map
 80   82C5              ; BC - XY
 81   82C5              ; address -> HL
 82   82C5              ; https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
 83   82C5              GetAttrAddress:
 84   82C5 79               ld a, C
 85   82C6 E6 C0                and %11000000
 86   82C8 07                   rlca
 87   82C9 07                   rlca
 88   82CA C6 58                add $58
 89   82CC 57                   ld d, a
 90   82CD 79               ld a, C
 91   82CE E6 38            and %00111000
 92   82D0 07               rlca
 93   82D1 07               rlca
 94   82D2
 95   82D2 80               add b
 96   82D3 5F               ld e, a
 97   82D4
 98   82D4 D5               push de
 99   82D5 E1               pop hl
100   82D6 C9               ret
101   82D7
102   82D7              ; Get sprite address
103   82D7              ; BC - XY
104   82D7              ; DE - address
105   82D7              ; https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
106   82D7              GetScreenPos:
107   82D7 79               ld a, c
108   82D8 E6 38            and %00111000
109   82DA 07               rlca
110   82DB 07               rlca
111   82DC B0               or b
112   82DD 5F               ld e, a
113   82DE 79               ld a, c
114   82DF E6 07            and %00000111
115   82E1 57               ld d, a
116   82E2 79               ld a, c
117   82E3 E6 C0            and %11000000
118   82E5 0F               rrca
119   82E6 0F               rrca
120   82E7 0F               rrca
121   82E8 B2               or d
122   82E9 F6 40            or $40
123   82EB 57               ld d, a
124   82EC C9               ret
125   82ED
126   82ED              ; Moves DE down a line
127   82ED              ; https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
128   82ED              GetNextLine:
129   82ED 14               inc d
130   82EE 7A               ld a, d
131   82EF E6 07            and %00000111
132   82F1 C0               ret nz
133   82F2 7B               ld a, e
134   82F3 C6 20            add a, %00100000
135   82F5 5F               ld e, a
136   82F6 D8               ret c
137   82F7 7A               ld a, d
138   82F8 D6 08            sub %00001000
139   82FA 57               ld d, a
140   82FB C9               ret
141   82FC
142   82FC              ; HL - sprite address
143   82FC              ; DE - position address
144   82FC              ; https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
145   82FC              DrawSprite:
146   82FC 06 08            ld b, 8
147   82FE              SpriteNextLine:
148   82FE 7E               ld a, (hl)
149   82FF 12               ld (de), a
150   8300 23               inc hl
151   8301
152   8301 CD ED 82         call GetNextLine
153   8304 10 F8            djnz SpriteNextLine
154   8306
155   8306 C9               ret
156   8307
157   8307                  savesna "./main.sna", Main
# file closed: main.asm

Value    Label
------ - -----------------------------------------------------------
0x8000   Clear_Screen
0x8014   Fill_Attr
0x8024   Print_String
0x8042   Get_Char_Address
0x8031   Print_String_0
0x80D1   Print_Char
0x8052 X Char_Address_Down
0x805C X Get_Pixel_Address
0x807C X Pixel_Address_Down
0x808B X Pixel_Address_Up
0x8098 X Print_BCD_8
0x80B5   Print_BCD
0x80A0 X Print_BCD_6
0x80A8 X Print_BCD_4
0x80B0 X Print_BCD_2
0x80CC X Print_Char_At
0x80EC   Print_UDG8
0x80F5   PrepTrack
0x82C5   GetAttrAddress
0x8106   TrackPaletteOffset
0x8107   TrackPaletteTick
0x8111   TrackPaletteTickDone
0x8115   FillTrackStart
0x8117   FillTrackLoop
0x812C   FillTrackLoopBody
0x811D   TrackPalette
0x8158   PrepSky
0x819C   DrawMoon
0x817C   MoonSprite00
0x8184   MoonSprite01
0x818C   MoonSprite10
0x8194   MoonSprite11
0x82D7   GetScreenPos
0x82FC   DrawSprite
0x81D1   StarsSprite0
0x81D9   StarsSprite1
0x81E1   StarBlinkOffset
0x81E2   StarBlinkTick
0x81EA   DrawStars
0x8245   DrawStar
0x8252   DrawStarCont
0x8256 X Main
0x82B9   PrepScreen
0x82BF   PrepBorder
0x82A8   FillTurnBack
0x82A0   DrawString
0x826D   AnimLoop
0x826C   AnimTickDelay
0x8285   AnimLoopDone
0x828F   TurnBackStr
0x82ED   GetNextLine
0x82FE   SpriteNextLine
